//===========================Device Test Code V1.0=============================================//

// The front is the USB Interface of Arduino
// Left Motor:Encoder1(6DOF_Shield),M2(Motor_driver)
// Right Motor:Encoder2(6DOF_Shield),M1(Motor_driver)
// Note:Please turn on the motor-driver's power before test!

//=============================KENT 2.26.2013==================================================//

#include <Wire.h>

//-----------------I2C BUS ------------------------------------------------------------------------------- 
#define DEVICE (0x53)      //ADXL345 device address
#define TO_READ (6)        //num of bytes we are going to read each time (two bytes for each axis)
byte buff[TO_READ] ;       //6 bytes buffer for saving data read from the device
char str[512];             //string buffer to transform data before sending it to the serial port
//--------------------------------------------------------------------------------------------------------
int regAddress = 0x32;    //first axis-acceleration-data register on the ADXL345
float GyroX,GyroY,GyroZ,GyroTemp;

int g_offx = 0;
int g_offy = 0;
int g_offz = 0;

#define ITG3200_Address 0x68

int RightMotorEN=4;
int RightMotorPWM=5;
int LeftMotorPWM=6;
int LeftMotorEN=7;

#define LF 0
#define RT 1

int Lduration,Rduration;
boolean LcoderDir,RcoderDir;
const byte encoder0pinA = 2;
const byte encoder0pinB = 8;
byte encoder0PinALast;
const byte encoder1pinA = 3;
const byte encoder1pinB = 9;
byte encoder1PinALast;

int RotationCoder[2];



void setup()
{
  Wire.begin();           // join i2c bus (address optional for master)
  Serial.begin(9600);
  for(int i=4;i<=7;i++)
  {
     pinMode(i,OUTPUT);
  }
  //Turning on the ADXL345
  writeTo(DEVICE, 0x2D, 0);      
  writeTo(DEVICE, 0x2D, 16);
  writeTo(DEVICE, 0x2D, 8);
  
  CoderInit();//Initialize the module
  
  delay(100);
  initGyro();
  delay(100);
  GyroCalibrate();
  delay(100);
}



void loop()
{
  if(Serial.available())
  {
    char code=Serial.read();
    switch(code)
    {
      case 'R': RightMotorTest();
                delay(100);
                if(Rduration<-5)
                   Serial.println("Right Encoder OK");
                   else
                    Serial.println("Right Encoder ERROR!");
                Rduration=0;
                Stop();break;
                
       case 'L': LeftMotorTest();
                delay(100);
                if(Lduration<-5)
                   Serial.println("Left Encoder OK");
                   else
                    Serial.println("Left Encoder ERROR!");
                Lduration=0;
                Stop();break;
        case 'S':float ax,ay,az;
                 readFrom(DEVICE, regAddress, TO_READ, buff); //read the acceleration data from the ADXL345
                 ax = (((int)buff[1]) << 8) | buff[0];   
                 ay = (((int)buff[3])<< 8) | buff[2];  
                 az = (((int)buff[5]) << 8) | buff[4]; 
                 GyroRead();
                 
                 Serial.print(ax);
                  Serial.print(',');
                 Serial.print(ay);
                 Serial.print(',');
                 Serial.print(az);
                 Serial.print(',');
                 Serial.print(GyroX / 14.375); // Data to Degree conversation
                 Serial.print(',');
                 Serial.print(GyroY / 14.375);
                 Serial.print(',');
                 Serial.println(GyroZ / 14.375);
                 delay(100);
           }
         }
}

void RightMotorTest()//The Right Motor will rotate Clockwise.
{
  digitalWrite(RightMotorEN,LOW);
  analogWrite( RightMotorPWM,80);
}

void LeftMotorTest()//The Left Motor will rotate counterclockwise.
{
  digitalWrite(LeftMotorEN,LOW);
  analogWrite( LeftMotorPWM,80);
}

void Stop()//The Right Motor will rotate Clockwise.
{
  analogWrite( LeftMotorPWM,0);
  analogWrite( RightMotorPWM,0);
}




//=====================ENCODER TEST======================//

void CoderInit()
{
  LcoderDir = true;
  RcoderDir = true;	

 // for(int i = 2;i<4; i ++)  pinMode(i,INPUT);
  pinMode(8,INPUT);
  pinMode(9,INPUT);
  attachInterrupt(LF, LwheelSpeed, CHANGE);
  attachInterrupt(RT, RwheelSpeed, CHANGE);
}


void LwheelSpeed()
{
  int Lstate = digitalRead(encoder0pinA);
  if((encoder0PinALast == LOW)&&Lstate==HIGH)
  {
    int val = digitalRead(encoder0pinB);
    if(val == LOW && LcoderDir)  LcoderDir = false; //Lreverse
    else if(val == HIGH && !LcoderDir)  LcoderDir = true;  //Lforward
  }
  encoder0PinALast = Lstate;

  if(!LcoderDir)  Lduration++;
  else  Lduration--;

  if(true)  RotationCoder[LF] ++;
  else RotationCoder[LF] = 0;
}


void RwheelSpeed()
{
  int Rstate = digitalRead(encoder1pinA);
  if((encoder1PinALast == LOW)&&Rstate==HIGH)
  {
    int val = digitalRead(encoder1pinB);
    if(val == LOW && RcoderDir)  RcoderDir = false; //Rreverse
    else if(val == HIGH && !RcoderDir)  RcoderDir = true;  //Rforward
  }
  encoder1PinALast = Rstate;

  if(!RcoderDir)  Rduration--;
  else  Rduration++;

  if(true)  RotationCoder[RT] ++;
  else RotationCoder[RT] = 0;
}

//---------------- I2C Functions --------------------------------------------------------------
//Writes val to address register on device
void writeTo(int device, byte address, byte val) {
  Wire.beginTransmission(device); //start transmission to device 
  Wire.send(address);        // send register address
  Wire.send(val);        // send value to write
  Wire.endTransmission(); //end transmission
}

//reads num bytes starting from address register on device in to buff array
void readFrom(int device, byte address, int num, byte buff[])
{
  Wire.beginTransmission(device); //start transmission to device 
  Wire.send(address);        //sends address to read from
  Wire.endTransmission(); //end transmission

    Wire.beginTransmission(device); //start transmission to device
  Wire.requestFrom(device, num);    // request 6 bytes from device

  int i = 0;
  while(Wire.available())    //device may send less than requested (abnormal)
  { 
    buff[i] = Wire.receive(); // receive a byte
    i++;
  }
  Wire.endTransmission(); //end transmission
}

//-----------------------I2C Functions end---------------------------------------------------------

// **************************
// I2C Gyroscope ITG3200 
// **************************
void initGyro() {
   Wire.beginTransmission(ITG3200_Address); 
   Wire.send(0x3E);  
   Wire.send(0x00);   
   Wire.endTransmission(); 
   
   Wire.beginTransmission(ITG3200_Address); 
   Wire.send(0x15);  
   Wire.send(0x07);   
   Wire.endTransmission(); 
   
   Wire.beginTransmission(ITG3200_Address); 
   Wire.send(0x16);  
   Wire.send(0x1E);   // +/- 2000 dgrs/sec, 1KHz, 1E, 19
   Wire.endTransmission(); 
   
   Wire.beginTransmission(ITG3200_Address); 
   Wire.send(0x17);  
   Wire.send(0x00);   
   Wire.endTransmission(); 
   
   
}

void GyroCalibrate(){

 int tmpx = 0;
 int tmpy = 0;
 int tmpz = 0; 

 g_offx = 0;
 g_offy = 0;
 g_offz = 0;
 
 for (char i = 0;i<10;i++)
    {
    delay(10);  
    GyroRead();
    tmpx += GyroX;
    tmpy += GyroY;
    tmpz += GyroZ; 
    }  
 g_offx = tmpx/10;
 g_offy = tmpy/10;
 g_offz = tmpz/10;
 
 
  
}


void GyroRead() {
  Wire.beginTransmission(ITG3200_Address); 
  Wire.send(0x1B);       
  Wire.endTransmission(); 
  
  Wire.beginTransmission(ITG3200_Address); 
  Wire.requestFrom(ITG3200_Address, 8);    // request 8 bytes from ITG3200
  
  int i = 0;
  byte buff[8];
  while(Wire.available())    
  { 
    buff[i] = Wire.receive(); 
    i++;
  }
  Wire.endTransmission(); 
    
  GyroX = ((buff[4] << 8) | buff[5]) - g_offx;
  GyroY = ((buff[2] << 8) | buff[3]) - g_offy;
  GyroZ = ((buff[6] << 8) | buff[7]) - g_offz;
  GyroTemp = (buff[0] << 8) | buff[1]; // temperature 
 
  
}



